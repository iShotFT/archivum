name: 'archivum'
services:
  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    hostname: sabnzbd
    container_name: sabnzbd
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    volumes:
      - sabnzbd_config:/config
      - downloads:/downloads
      - downloads_complete:/downloads_complete
      - hetzner_storage_share:/hetzner-storage
    ports:
      - 38080:38080
    restart: unless-stopped
    networks:
      - archivum

  deluge:
    image: lscr.io/linuxserver/deluge:latest
    hostname: deluge
    container_name: deluge
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
      - DELUGE_LOGLEVEL=info
    volumes:
      - deluge_config:/config
      - downloads:/downloads
      - downloads_complete:/downloads_complete
      - hetzner_storage_share:/hetzner-storage
    ports:
      - 6881:6881
      - 6881:6881/udp
      - 38081:38081
    restart: unless-stopped
    networks:
      - archivum
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:38081"]
      interval: 30s
      timeout: 10s
      retries: 5

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    hostname: sonarr
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    volumes:
      - sonarr_config:/config
      - downloads:/downloads
      - downloads_complete:/downloads_complete
      - hetzner_storage_share:/hetzner-storage
    ports:
      - 38082:38082
    restart: unless-stopped
    networks:
      - archivum
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:38082"]
      interval: 30s
      timeout: 10s
      retries: 5

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    hostname: radarr
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    volumes:
      - radarr_config:/config
      - downloads:/downloads
      - downloads_complete:/downloads_complete
      - hetzner_storage_share:/hetzner-storage
    ports:
      - 38083:38083
    restart: unless-stopped
    networks:
      - archivum
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:38083"]
      interval: 30s
      timeout: 10s
      retries: 5

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    hostname: prowlarr
    container_name: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    volumes:
      - prowlarr_config:/config
      - downloads_complete:/downloads_complete
      - hetzner_storage_share:/hetzner-storage
    ports:
      - 38084:38084
    restart: unless-stopped
    networks:
      - archivum

  ombi:
    image: lscr.io/linuxserver/ombi:latest
    hostname: ombi
    container_name: ombi
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    volumes:
      - ombi_config:/config
      - downloads_complete:/downloads_complete
      - hetzner_storage_share:/hetzner-storage
    ports:
      - 38085:3579
    restart: unless-stopped
    networks:
      - archivum
    depends_on:
      deluge:
        condition: service_healthy
      sonarr:
        condition: service_healthy
      radarr:
        condition: service_healthy

  plex:
    image: lscr.io/linuxserver/plex:latest
    hostname: plex
    container_name: plex
    env_file:
      - ./.env
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM}
    volumes:
      - plex_config:/config
      - downloads_complete:/downloads_complete
    ports:
      - 32400:32400
    restart: unless-stopped
    networks:
      - archivum

  duckdns:
    image: lscr.io/linuxserver/duckdns:latest
    hostname: duckdns
    container_name: duckdns
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
      - SUBDOMAINS=helakker,helakker-plex
      - TOKEN=${DUCKDNS_TOKEN}
      - UPDATE_IP=ipv4
      - LOG_FILE=false
    volumes:
      - duckdns_config:/config
    restart: unless-stopped
    networks:
      - archivum

  # proxy:
  #   image: 'jc21/nginx-proxy-manager:latest'
  #   hostname: proxy
  #   container_name: proxy
  #   volumes:
  #     - proxy_data:/data
  #     - proxy_letsencrypt:/etc/letsencrypt
  #   ports:
  #     - '80:80'
  #     - '81:81'
  #     - '443:443'
  #   restart: unless-stopped
  #   networks:
  #     - archivum

  organizr:
    image: 'organizr/organizr:latest'
    container_name: organizr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    ports:
      - '38086:80'
    volumes:
      - organizr_config:/config
    restart: unless-stopped
    networks:
      - archivum

volumes:
  sabnzbd_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/sabnzbd/config
  downloads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/downloads
  downloads_complete:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/d/Archivum
  deluge_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/deluge/config
  sonarr_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/sonarr/config
  radarr_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/radarr/config
  plex_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/plex/config
  prowlarr_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/prowlarr/config
  ombi_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/ombi/config
  proxy_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/proxy/data
  proxy_letsencrypt:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/proxy/letsencrypt
  duckdns_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/duckdns/config
  organizr_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/organizr/config
  hetzner_storage_share:
    driver_opts:
      type: cifs
      o: username=${HETZNER_STORAGE_BOX_USER},password=${HETZNER_STORAGE_BOX_PASSWORD},vers=3.0
      device: "//${HETZNER_STORAGE_BOX_SERVER}/backup"
networks:
  archivum:
    driver: 'bridge'
