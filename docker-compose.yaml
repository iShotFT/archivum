name: 'archivum'
services:
  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    environment:
      - VIRTUAL_HOST=sabnzbd.${DOMAIN_NAME}
      - LETSENCRYPT_HOST=sabnzbd.${DOMAIN_NAME}
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - sabnzbd_config:/config
      - downloads:/downloads
      - downloads_complete:/downloads_complete
      - hetzner_storage_share:/hetzner-storage
    restart: unless-stopped
    network_mode: "service:gluetun"
    depends_on:
      acme:
        condition: service_healthy

  deluge:
    image: lscr.io/linuxserver/deluge:latest
    container_name: deluge
    environment:
      - VIRTUAL_HOST=deluge.${DOMAIN_NAME}
      - LETSENCRYPT_HOST=deluge.${DOMAIN_NAME}
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - DELUGE_LOGLEVEL=info
    volumes:
      - deluge_config:/config
      - downloads:/downloads
      - downloads_complete:/downloads_complete
      - hetzner_storage_share:/hetzner-storage
    restart: unless-stopped
    network_mode: "service:gluetun"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:38081"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      acme:
        condition: service_healthy

  sonarr:
    image: mdhiggins/sonarr-sma
    hostname: sonarr
    container_name: sonarr
    environment:
      - VIRTUAL_HOST=sonarr.${DOMAIN_NAME}
      - LETSENCRYPT_HOST=sonarr.${DOMAIN_NAME}
      - VIRTUAL_PORT=${PORT_SONARR}
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - SMA_UPDATE=false # set to true if you want to have SMA updated on container launch
    volumes:
      - sma_config:/usr/local/sma/config
      - sonarr_config:/config
      - downloads:/downloads
      - downloads_complete:/downloads_complete
      - hetzner_storage_share:/hetzner-storage
    expose:
      - ${PORT_SONARR}
    restart: unless-stopped
    networks:
      - archivum
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:38082"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      acme:
        condition: service_healthy

  radarr:
    image: mdhiggins/radarr-sma
    hostname: radarr
    container_name: radarr
    environment:
      - VIRTUAL_HOST=radarr.${DOMAIN_NAME}
      - LETSENCRYPT_HOST=radarr.${DOMAIN_NAME}
      - VIRTUAL_PORT=${PORT_RADARR}
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - sma_config:/usr/local/sma/config
      - radarr_config:/config
      - downloads:/downloads
      - downloads_complete:/downloads_complete
      - hetzner_storage_share:/hetzner-storage
    expose:
      - ${PORT_RADARR}
    restart: unless-stopped
    networks:
      - archivum
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:38083"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      acme:
        condition: service_healthy

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    hostname: prowlarr
    container_name: prowlarr
    environment:
      - VIRTUAL_HOST=prowlarr.${DOMAIN_NAME}
      - LETSENCRYPT_HOST=prowlarr.${DOMAIN_NAME}
      - VIRTUAL_PORT=${PORT_PROWLARR}
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - prowlarr_config:/config
      - downloads_complete:/downloads_complete
      - hetzner_storage_share:/hetzner-storage
    expose:
      - ${PORT_PROWLARR}
    restart: unless-stopped
    networks:
      - archivum
    depends_on:
      acme:
        condition: service_healthy

  overseerr:
    image: sctx/overseerr:latest
    hostname: overseerr
    container_name: overseerr
    environment:
      - VIRTUAL_HOST=request.${DOMAIN_NAME}
      - LETSENCRYPT_HOST=request.${DOMAIN_NAME}
      - VIRTUAL_PORT=${PORT_OVERSEERR}
      - LOG_LEVEL=debug
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - PORT=${PORT_OVERSEERR}
    expose:
      - ${PORT_OVERSEERR}
    volumes:
      - overseerr_config:/app/config
      - downloads_complete:/downloads_complete
      - hetzner_storage_share:/hetzner-storage
    restart: unless-stopped
    networks:
      - archivum
    depends_on:
      acme:
        condition: service_healthy
      deluge:
        condition: service_healthy
      sonarr:
        condition: service_healthy
      radarr:
        condition: service_healthy

  plex:
    image: lscr.io/linuxserver/plex:latest
    hostname: plex
    container_name: plex
    env_file:
      - ./.env
    environment:
      - VIRTUAL_HOST=plex.${DOMAIN_NAME}
      - LETSENCRYPT_HOST=plex.${DOMAIN_NAME}
      - VIRTUAL_PORT=${PORT_PLEX}
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM}
    volumes:
      - plex_config:/config
      - downloads_complete:/downloads_complete
      - hetzner_storage_share:/hetzner-storage
    ports:
      - ${PORT_PLEX}:${PORT_PLEX}
    restart: unless-stopped
    networks:
      - archivum
    depends_on:
      acme:
        condition: service_healthy

  tautulli:
    image: lscr.io/linuxserver/tautulli:latest
    hostname: tautulli
    container_name: tautulli
    environment:
      - VIRTUAL_HOST=tautulli.${DOMAIN_NAME}
      - LETSENCRYPT_HOST=tautulli.${DOMAIN_NAME}
      - VIRTUAL_PORT=${PORT_TAUTULLI}
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - tautulli_config:/config
    expose:
      - ${PORT_TAUTULLI}
    restart: unless-stopped
    networks:
      - archivum
    depends_on:
      acme:
        condition: service_healthy

  nzbhydra2:
    image: lscr.io/linuxserver/nzbhydra2:latest
    hostname: nzbhydra2
    container_name: nzbhydra2
    environment:
      - VIRTUAL_HOST=hydra.${DOMAIN_NAME}
      - LETSENCRYPT_HOST=hydra.${DOMAIN_NAME}
      - VIRTUAL_PORT=${PORT_HYDRA}
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - nzbhydra2_config:/config
      - downloads:/downloads
      - downloads_complete:/downloads_complete
    expose:
      - ${PORT_HYDRA}
    restart: unless-stopped
    networks:
      - archivum
    depends_on:
      acme:
        condition: service_healthy

  jackett:
    image: lscr.io/linuxserver/jackett:latest
    hostname: jackett
    container_name: jackett
    environment:
      - VIRTUAL_HOST=jackett.${DOMAIN_NAME}
      - LETSENCRYPT_HOST=jackett.${DOMAIN_NAME}
      - VIRTUAL_PORT=${PORT_JACKETT}
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - AUTO_UPDATE=true #optional
    volumes:
      - jackett_config:/config
      - downloads:/downloads
      - downloads_complete:/downloads_complete
    expose:
      - ${PORT_JACKETT}
    restart: unless-stopped
    networks:
      - archivum
    depends_on:
      acme:
        condition: service_healthy

  homarr:
    image: ghcr.io/ajnart/homarr:latest
    hostname: homarr
    container_name: homarr
    environment:
      - VIRTUAL_HOST=overview.${DOMAIN_NAME}
      - LETSENCRYPT_HOST=overview.${DOMAIN_NAME}
      - VIRTUAL_PORT=${PORT_HOMARR}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Optional, only if you want docker integration
      - homarr_config:/app/data/configs
      - homarr_icons:/app/public/icons
      - homarr_data:/data
    expose:
      - ${PORT_HOMARR}
    restart: unless-stopped
    networks:
      - archivum
    depends_on:
      acme:
        condition: service_healthy

  james:
    image: "ghcr.io/home-assistant/home-assistant:stable"
    hostname: james
    container_name: james
    environment:
      - VIRTUAL_HOST=james.${DOMAIN_NAME}
      - LETSENCRYPT_HOST=james.${DOMAIN_NAME}
      - VIRTUAL_PORT=${PORT_JAMES}
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - james_config:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    expose:
      - ${PORT_JAMES}
    restart: unless-stopped
    networks:
      - archivum
    depends_on:
      acme:
        condition: service_healthy

  ddns:
    image: qmcgaw/ddns-updater
    hostname: ddns
    container_name: ddns
    environment:
      - VIRTUAL_HOST=ddns.${DOMAIN_NAME}
      - LETSENCRYPT_HOST=ddns.${DOMAIN_NAME}
      - VIRTUAL_PORT=${PORT_DDNS}
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - DATADIR=/updater/data
      - PERIOD=5m
      - UPDATE_COOLDOWN_PERIOD=5m
      - PUBLICIP_FETCHERS=all
      - PUBLICIP_HTTP_PROVIDERS=all
      - PUBLICIPV4_HTTP_PROVIDERS=all
      - PUBLICIPV6_HTTP_PROVIDERS=all
      - PUBLICIP_DNS_PROVIDERS=all
      - PUBLICIP_DNS_TIMEOUT=3s
      - HTTP_TIMEOUT=10s
      - LISTENING_ADDRESS=:${PORT_DDNS}
      - ROOT_URL=/
      - BACKUP_PERIOD=0
      - BACKUP_DIRECTORY=/updater/data
      - LOG_LEVEL=info
      - LOG_CALLER=hidden
      - SHOUTRRR_ADDRESSES=
    volumes:
      - ddns_config:/updater/data
    expose:
      - ${PORT_DDNS}
    restart: unless-stopped
    networks:
      - archivum
    depends_on:
      acme:
        condition: service_healthy
  
  nginx:
    image: 'nginxproxy/nginx-proxy:latest'
    hostname: nginx
    container_name: nginx
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - DEFAULT_EMAIL=${DOMAIN_EMAIL}
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro # Required, share your docker socket with this container so it can extract context
      - html:/usr/share/nginx/html
      - certs:/etc/nginx/certs
      - ${PWD}/storage/nginx/data/network_internal.conf:/etc/nginx/network_internal.conf
    ports:
      - '80:80'
      - '443:443'
    restart: unless-stopped
    networks:
      archivum:
       ipv4_address: 172.18.0.10
    healthcheck:
      test: ["CMD", "service", "nginx", "status", "||", "exit", "1"]
      interval: 15s
      timeout: 10s
      retries: 5

  acme:
    image: 'nginxproxy/acme-companion:latest'
    hostname: acme
    container_name: acme
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - DEFAULT_EMAIL=${DOMAIN_EMAIL}
      - TRUST_DOWNSTREAM_PROXY=false
    volumes_from:
      - nginx
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Required, share your docker socket with this container so it can extract context
      - acme:/etc/acme.sh
    restart: unless-stopped
    networks:
      - archivum
    healthcheck:
      test: ["CMD", "/app/cert_status", "||", "exit", "1"]
      interval: 15s
      timeout: 10s
      retries: 5
    depends_on:
      nginx:
        condition: service_healthy
  gluetun:
    image: qmcgaw/gluetun
    hostname: gluetun
    container_name: gluetun
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    ports:
      - 38080:38080/tcp # nzb
      - 38081:38081/tcp # deluge
      - 6881:6881 # deluge
      - 6881:6881/udp # deluge
    volumes:
      - gluetun_config:/gluetun
    environment:
      VIRTUAL_HOST_MULTIPORTS: |-
        sabnzbd.${DOMAIN_NAME}:
          "/":
            port: 38080
        deluge.${DOMAIN_NAME}:
          "/":
            port: 38081
      VPN_SERVICE_PROVIDER: ${OPENVPN_PROVIDER}
      VPN_TYPE: openvpn
      OPENVPN_USER: ${OPENVPN_USER}
      OPENVPN_PASSWORD: ${OPENVPN_PASSWORD}
      SERVER_COUNTRIES: 'Germany'
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TIMEZONE}
      UPDATER_PERIOD: '24h'
    restart: unless-stopped
    networks:
      - archivum
    depends_on:
      nginx:
        condition: service_healthy

volumes:
  sma_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/sma/config
  nzbhydra2_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/nzbhydra2/config
  jackett_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/jackett/config
  james_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/james/config
  gluetun_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/gluetun/config
  sabnzbd_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/sabnzbd/config
  downloads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/downloads
  downloads_complete:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/d/Archivum
  deluge_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/deluge/config
  sonarr_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/sonarr/config
  radarr_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/radarr/config
  plex_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/plex/config
  tautulli_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/tautulli/config
  prowlarr_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/prowlarr/config
  homarr_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/homarr/configs
  homarr_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/homarr/data
  homarr_icons:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/homarr/icons
  ddns_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/ddns/config
  overseerr_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/overseerr/config
  proxy_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/proxy/data
  proxy_letsencrypt:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/proxy/letsencrypt
  nginx_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/nginx/data
  certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/certs
  html:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/html
  acme:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/acme
  hetzner_storage_share:
    driver_opts:
      type: cifs
      o: username=${HETZNER_STORAGE_BOX_USER},password=${HETZNER_STORAGE_BOX_PASSWORD},vers=3.0
      device: "//${HETZNER_STORAGE_BOX_SERVER}/backup"
networks:
  archivum:
    driver: 'bridge'
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      driver: default
      config:
      - subnet: 172.18.0.0/24
